# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Python CICD

on:
  push:
    branches:
      - '**'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - '**'

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4

      - id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          cache: 'poetry'

      - name: Install Poetry
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install poetry

      - name: Configure Poetry (in-project venv)
        run: |
          poetry config virtualenvs.in-project true

      - name: Cache virtualenv
        id: poetry-cache
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-ansi

      - name: Test format
        run: |
          poetry run black --check src/ecsapi

      - name: Test lint
        run: |
          poetry run flake8 src/ecsapi

      - name: Run tests
        run: |
          poetry run pytest --cov


  build:
    runs-on: ubuntu-22.04
    needs:
      - test
    steps:
      - uses: actions/checkout@v4

      - id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          cache: 'poetry'

      - name: Install Poetry
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install poetry

      - name: Configure Poetry (in-project venv)
        run: |
          poetry config virtualenvs.in-project true

      - name: Cache virtualenv
        id: poetry-cache
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-ansi

      - name: Build package
        run: |
          poetry build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: dist/

  pypi-publish:
    runs-on: ubuntu-22.04
    needs:
      - build
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      id-token: write

    environment:
      name: pypi

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
